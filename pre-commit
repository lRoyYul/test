#!/bin/sh
#
# Pre-commit hook script for Unity to ensure meta files stay in sync, as well as check that every folder & file
# marked to be ignored in .gitignore has an entry for its meta file to be ignored too.
# Based on this: https://github.com/NYUGameCenter/Unity-Git-Config/blob/master/pre-commit
# Modified 4/15/2025 to handle empty folders and whitespaces in file names
#
# After cloning your repo, put this file into directory <your_repo>/.git/hooks. To disable it remove it from there.

ASSETS_DIR="$(git config --get unity3d.assets-dir || echo "Assets")"

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Redirect output to stderr.
exec 1>&2

# Ensure that there's not a >100MB file in this checkin, which GitHub won't allow
CURRENT_DIR="$(pwd)"
HAS_ERROR=""
COMMIT_TEXT=$(git diff --cached --name-only | sort | uniq)
SAVEIFS=$IFS

IFS=$'\n'
for file in $COMMIT_TEXT; do
    file_size=$(du -m "$CURRENT_DIR/$file" | awk '{print $1}')
    if [ "$file_size" -ge 100 ]; then
        echo "$file is over 100MB."
        HAS_ERROR="1"
    fi
done
IFS=$SAVEIFS

if [ "$HAS_ERROR" != "" ]; then
    echo "Can't commit, fix errors first." >&2
    exit 1
fi

# Check for added files
git diff --cached --name-only --diff-filter=A -z $against -- "$ASSETS_DIR" | while IFS= read -r -d '' f; do
    ext="${f##*.}"
    base="${f%.*}"

    if [ "$ext" = "meta" ]; then
        if [ $(git ls-files --cached -- "$base" | wc -l) = 0 ]; then
            cat <<EOF
Error: Redundant meta file.
Meta file \`$f' is added, but \`$base' is not in the git index.
Please add \`$base' to git as well.
EOF
            exit 1
        fi
    else
        p="$f"
        while [ "$p" != "$ASSETS_DIR" ]; do
            if [ $(git ls-files --cached -- "$p.meta" | wc -l) = 0 ]; then
                cat <<EOF
Error: Missing meta file.
Asset \`$f' is added, but \`$p.meta' is not in the git index.
Please add \`$p.meta' to git as well.
EOF
                exit 1
            fi
            p="${p%/*}"
        done
    fi
done

ret="$?"
if [ "$ret" != 0 ]; then
    exit "$ret"
fi

# Check for removed files
git diff --cached --name-only --diff-filter=D -z $against -- "$ASSETS_DIR" | while IFS= read -r -d '' f; do
    ext="${f##*.}"
    base="${f%.*}"

    if [ "$ext" = "meta" ]; then
        if [ $(git ls-files --cached -- "$base" | wc -l) != 0 ]; then
            cat <<EOF
Error: Redundant meta file.
Meta file \`$f' is removed, but \`$base' is still in the git index.
Please remove \`$base' from git as well.
EOF
            exit 1
        fi
    else
        p="$f"
        while [ "$p" != "$ASSETS_DIR" ]; do
            if [ $(git ls-files --cached -- "$p" | wc -l) = 0 ] && [ $(git ls-files --cached -- "$p.meta" | wc -l) != 0 ]; then
                cat <<EOF
Error: Missing meta file.
Asset \`$f' is removed, but \`$p.meta' is still in the git index.
Please remove \`$p.meta' from git as well.
EOF
                exit 1
            fi
            p="${p%/*}"
        done
    fi
done

ret="$?"
if [ "$ret" != 0 ]; then
    exit "$ret"
fi

# Check if staged files contain .gitignore
if [ ! `git diff --name-only --cached | grep -- "\.gitignore"` ]; then
    # Avoid expensive diff actions if there is no change in .gitignore
    exit 0
fi

# New lines have the format {+xxxxx+}
raw_diff_output=$(git diff --cached --word-diff=plain.gitignore | egrep "\{\+.*\+\}")

# Prepare two strings: one for directories and one for meta files
diff_output_dirs=""
diff_output_metas=""

for raw_entry in $raw_diff_output; do
    # Strip leading and trailing separator "{+" and "+}"
    if ((${#raw_entry} <= 4)); then
        continue
    else
        e=${raw_entry:2:$((${#raw_entry}-4))}
        is_meta=$(echo $e | egrep ".*meta" | wc -l)
        if [ $is_meta -eq 0 ]; then
            diff_output_dirs="${diff_output_dirs} ${e}"
        else
            diff_output_metas="${diff_output_metas} ${e}"
        fi
    fi
done

# Iterate over directories and check if there is an entry for the appropriate meta file
for i in $diff_output_dirs; do 
    # Meta file entries are often without directory, so strip the path
    dir_name=$(echo $i | egrep -o "/[^/]+$" | cut -d / -f 2)
    echo $dir_name
    has_meta_ignore=$(echo $diff_output_metas | grep -- "$dir_name.meta" | wc -l)
    if [ ${has_meta_ignore} -eq 0 ]; then
        echo "$dir_name found in.gitignore but not the corresponding meta file! Please add ${dir_name}.meta to.gitignore"
        exit 1
    fi
done

# Handle empty folders
empty_folders=$(git ls-files --others --exclude-standard --directory | grep -v '^$')
for folder in $empty_folders; do
    if [ ! -d "$folder" ]; then
        continue
    fi
    if [ -z "$(ls -A "$folder")" ]; then
        echo "Empty folder \`$folder' found. Please remove or add files."
        exit 1
    fi
done
